package com.rakute.training.spring.web;
import org.hamcrest.CoreMatchers;
//import static org.springframework.
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.rakuten.training.spring.domain.Product;
import com.rakuten.training.spring.service.ProductService;
import com.rakuten.training.spring.web.ProductController;

@RunWith(SpringRunner.class)
@WebMvcTest({ProductController.class})
public class ProductControllerUnitTest {
  @Autowired MockMvc mockmvc;
  @MockBean
ProductService service;
  @Test
  public void getProductById_Returns_Ok_With_Correct_Product_If_Found()throws Exception {
	  //Arrange
	  Product found=new Product("test",133.0f,100);int id=1;
	  found.setId(id);
	  Mockito.when(service.findById(id)).thenReturn(found);
	  //Act and Assert
	  mockmvc.perform(MockMvcRequestBuilders.get("/products/{id}",id))
			  .andExpect(MockMvcResultMatchers.status().isOk())
			  .andExpect(MockMvcResultMatchers.jsonPath("$.id", CoreMatchers.is(id)));
  }
}
